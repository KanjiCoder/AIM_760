    

    const   F_PUREHUE_R_G_B_LEANMUL = function                   // [617]
    PRIVATE_F_PUREHUE_R_G_B_LEANMUL(                             // [617]
                                                                 // [617]
        i_redd256  //: @i_redd256@ : Input Red   Byte :::://     // [617]
    ,   i_gree256  //: @i_redd256@ : Input Green Byte :::://     // [617]
    ,   i_blue256  //: @i_redd256@ : Input Blue  Byte :::://     // [617]
                                                                 // [617]
    ){                                                           // [617]
        //:#_LOAD_BUBBLE_SORT_ARRAY_#:[617]:-------------://     // [617]
                                                                 // [617]
            let arr_rgb = d_purehue_leanmul_rgb ;                // [617]
                                                                 // [617]
            arr_rgb[ 0 ]=( i_redd256 );                          // [617]
            arr_rgb[ 1 ]=( i_gree256 );                          // [617]
            arr_rgb[ 2 ]=( i_blue256 );                          // [617]
                                                                 // [617]
        //:-------------:#_LOAD_BUBBLE_SORT_ARRAY_#:[617]://     // [617]
        //:#_DO_BUBBLE_SORT_#:[617]:---------------------://     // [617]
        {                                                        // [617]
            let did; //: Did We Do A Swap ? :::::::::::::://     // [617]
            let dex; //: Index [ 0 to 1 ] Inclusive :::::://     // [617]
            let _0_; //: First  Value Relative  :::::::::://     // [617]
            let _1_; //: Second Value Relative  :::::::::://     // [617]
            while( 1===1 ){                                      // [617]
                                                                 // [617]
                did=(0);                                         // [617]
                for( dex = 0 ; dex <=(3-1-1) ; dex++ ){          // [617]
                                                                 // [617]
                    _0_=( arr_rgb[ dex+0 ] );                    // [617]
                    _1_=( arr_rgb[ dex+1 ] );                    // [617]
                                                                 // [617]
                    if( _0_ > _1_ ){                             // [617]
                         arr_rgb[ dex+0 ]=( _1_ );               // [617]
                         arr_rgb[ dex+1 ]=( _0_ );               // [617]
                         did=(1);                                // [617]
                    };;                                          // [617]
                };;                                              // [617]
                if( 0 == did ){break;};                          // [617]
            };;                                                  // [617]
        }                                                        // [617]
        //:---------------------:#_DO_BUBBLE_SORT_#:[617]://     // [617]
        //:#_CALC_RANGE_CALC_MUL_#:[617]:----------------://     // [617]
                                                                 // [617]
            let   leanrng ; //: @leanrng@ : Lean Range ::://     // [617]
            let o_leanmul ; //: @leanmul@ : Lean MULT...:://     // [617]
                                                                 // [617]
            //:SEE[ $_ORANGE_EXAMPLE_$ ]:::::::::::::::::://     // [617]
                                                                 // [617]
              leanrng =( arr_rgb[ 2 ] - arr_rgb[ 0 ] );          // [617]
            o_leanmul =( 256 / (leanrng+1) );                    // [617]
                                                                 // [617]
            if( d_bug >=1 ){                                     // [617]
                let rng =   leanrng ;                            // [617]
                let mul = o_leanmul ;                            // [617]
                                                                 // [617]
                if( 255 ==rng ){ ASS( 1 ==mul ,"[1MUL]" );};     // [617]
                if(  0  ==rng ){ ASS(256==mul ,"[MMAX]" );};     // [617]
            };;                                                  // [617]
        //:----------------:#_CALC_RANGE_CALC_MUL_#:[617]://     // [617]
                                                                 // [617]
                                                                 // [617]
        return( o_leanmul );                                     // [617]
    };;                                                          // [617]











    #_LOAD_BUBBLE_SORT_ARRAY_# :------------------------------+  // [617]
                                                              |  // [617]
        It seems really stupid to have such a tiny            |  // [617]
        bubble-sort, but I can't think of a better way.       |  // [617]
                                                              |  // [617]
        This[ purehue_leanmul_rgb ]array is a bubble          |  // [617]
        sort array dedicated to this function so that         |  // [617]
        we don't go creating and deleting arrays              |  // [617]
        every single time we call this function.              |  // [617]
                                                              |  // [617]
    :------------------------------: #_LOAD_BUBBLE_SORT_ARRAY_#  // [617]
    #_DO_BUBBLE_SORT_# :--------------------------------------+  // [617]
                                                              |  // [617]
        Bubble sort RGB components. The lowest component      |  // [617]
        value will be at[  rgb_arr[ 0 ] ], and                |  // [617]
        the highest at[    rgb_arr[ 1 ] ].                    |  // [617]
                                                              |  // [617]
        In other words :                                      |  // [617]
                                                              |  // [617]
        HIGHEST : rgb_arr[ 2 ]                                |  // [617]
        MIDDLE  : rgb_arr[ 1 ]                                |  // [617]
        LOWEST  : rgb_arr[ 0 ]                                |  // [617]
                                                              |  // [617]
    :---------------------------------------------------------+  // [617]
    #_CALC_RANGE_CALC_MUL_# :---------------------------------+  // [617]
                                                              |  // [617]
        Calculate the range, then calculate the               |  // [617]
        "lean multiplier".                                    |  // [617]
                                                              |  // [617]
        The less distance [MID] has to travel between         |  // [617]
        [MIN]and[MAX], the greater the lean multiplier.       |  // [617]
                                                              |  // [617]
        Or in other words, the more weight each               |  // [617]
        incremental change to [MID] has in effecting          |  // [617]
        the final hue.                                        |  // [617]
                                                              |  // [617]
                                                              |  // [617]
        LETS TRY:   TAG[ $_ORANGE_EXAMPLE_$ ]                 |  // [617]
                                                              |  // [617]
            R : 255                                           |  // [617]
            G : 200                                           |  // [617]
            B : 128                                           |  // [617]
                                                              |  // [617]
            Multiplier : ( 256 /  ( 255 - 128 + 1 ) )         |  // [617]
            Multiplier : 2                                    |  // [617]
                                                              |  // [617]
            Direction Vector : 200-128 === 72                 |  // [617]
                                                              |  // [617]
            Final Lean255 ===(72*2)=== 144                    |  // [617]
                                                              |  // [617]
            144/255 == roughly 0.5 , halfway...               |  // [617]
                                                              |  // [617]
            That checks out. An anchor of RED                 |  // [617]
            moving towards YELLOW.                            |  // [617]
                                                              |  // [617]
            Direction Vector of 255 gets you to yellow.       |  // [617]
            Halfway gets you to orange, which is what         |  // [617]
            I see in the color slider.                        |  // [617]
                                                              |  // [617]
    :---------------------------------: #_CALC_RANGE_CALC_MUL_#  // [617]